class ArrayQueue
{
	int front, rear;
    int []data;
    int maxsize;
    public ArrayQueue()
    {
    	front=rear =0;
    }
    public ArrayQueue(int size)
    {
    	front=rear =-1;
        maxsize = size;
        data = new int[size];
    }
	public boolean isEmpty()
	{
        if(front == -1 || front > rear) return true;
        else return false;
	}
	public boolean isFull()
	{

	    if((front==0 && rear==maxsize-1)||(front==rear+1)) return true;
	    else return false;
	}
    public void Endqueue(int x)
    {
        if(!isFull())
        {
            if(front ==-1)
            {
                front =0;
                rear =0;
                data[front] = x;
            }
            else
            {
                rear++;
                data[rear] = x;
            }
        }
        else  System.out.println("Queue is full");
    }
    public int Dequeue()
    {
        int x=0;
        if(isEmpty())
        {
            System.out.println("Queue is empty");
        }
        else
        {
            x = data[front];
            front++;
        }
        return x;
    }

    public void Display()
    {
        while(front<=rear)
        {
            int x = Dequeue();
            System.out.println(x);
        }
    }

}

public class Main {
  public static void main(String[] args) {
    System.out.println("Array Queue Example");

    ArrayQueue Q = new ArrayQueue(10);
    for(int i=10; i<=12; i++)
        Q.Endqueue(i);

    Q.Display();

    System.out.println(Q.isEmpty());

  }
}
//////////////////////////////////////////////QUEUE VONG
class ArrayQueue
{
    private int[]data;
    private int size, front, rear;
    public ArrayQueue(int m)
    {
        size = m;
        data = new int[size];
        front=-1; rear=-1;
    }
    public boolean isEmpty()
    {
        if(front==-1 || front > rear) return true;
        else return false;
    }
    public boolean isFull()
    {
        if((front==0 && rear==size-1)||(front > rear)) return true;
        else return false;
    }
    public void enQueue(int x)
    {
        System.out.println("front:" + front + ", rear:" + rear);
        if(isFull()) System.out.println("Queue is full");
        else
        {
            if(front==-1) //queue rong
            {
                data[0] = x;
                front = 0; rear =0;
            }
            else if(rear < size)
            {
                rear++;
                data[rear] = x;
            }
            else //queue vong
            {
                rear = -1;
                rear++;
                data[rear]=x;
            }
        }
    }
    public int deQueue()
    {
        int v=0;
        if(isEmpty())  System.out.println("Queue is empty");
        else
        {
            if(front==rear) //queue chi co mot phan tu
            {
                v = data[front];
                front = rear = -1;
            }
            else
            {
                v = data[front];
                front++;
            }
        }
        return v;
    }

    public void Display()
    {
        for(int i=0; i<size; i++)
            System.out.print(data[i] + ",");
    }
}


public class Main {
  public static void main(String[] args) {
    System.out.println("Array Queue Example");

    ArrayQueue Q = new ArrayQueue(3);
    Q.enQueue(1);
    Q.enQueue(2);
    Q.enQueue(3);

    //Q.deQueue();
    //Q.enQueue(10);

    System.out.println(Q.isEmpty());
    System.out.println(Q.isFull());

    //Q.Display();

  }
}
