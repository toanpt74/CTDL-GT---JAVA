class ArrayQueue
{
    private int[]data;
    private int size, front, rear;
    public ArrayQueue(int m)
    {
        size = m;
        data = new int[size];
        front=-1; rear=-1;
    }
    public boolean isEmpty()
    {
        System.out.println("isEmpty: front=" + front + " rear=" + rear);
        if(front == rear) return true;
        else return false;
    }
    public boolean isFull()
    {
        if( (rear+1)%size == front) return true;
        else return false;
    }
    public void enQueue(int x)
    {

        if(isFull()) System.out.println("Queue is full");
        else
        {
            if(front==-1) //queue rong
            {
                data[0] = x;
                front = 0; rear =0;
            }
            else {
                rear = (rear + 1)%size;
                data[rear] = x;
            }
        }
        System.out.println("front:" + front + ", rear:" + rear);
    }
    public int deQueue()
    {
        int v=0;
        if(isEmpty())  System.out.println("Queue is empty");
        else
        {
            if(front==rear) //queue chi co mot phan tu
            {
                v = data[front];
                front = rear = -1;
            }
            else
            {
                v = data[front];
                front = (front+1)%size;
            }
        }
        System.out.println("in deQueue - front:" + front + ", rear:" + rear);
        return v;
    }

    public void Display()
    {
        for(int i=0; i<size; i++)
            System.out.print(data[i] + ",");
        System.out.println();
    }
}


public class Main {
  public static void main(String[] args) {
    System.out.println("Array Queue Example");
    int x=0;
    ArrayQueue Q = new ArrayQueue(3);
    Q.enQueue(1);
    Q.enQueue(2);
    Q.enQueue(3);
    System.out.println("---------1---------:"+Q.isFull());
    Q.deQueue();
    Q.enQueue(12);
    Q.Display();
    System.out.println("---------2--------:"+Q.isFull());
    Q.deQueue();
    Q.enQueue(100);
    Q.Display();
    System.out.println("----------3-----------:"+Q.isFull());

  }
}
