import java.util.Random;

class Node{	
	public int key;
	public int next;
	public Node(int key, int next){
		this.key = key;
		this.next = next;
	}		
}

class HashTable
{
	int size;
	int[] data;
	Node[] hashTable ;
	
	public HashTable(int s)
	{
		size = s;
		hashTable = new Node[size];
		for(int i=0; i<size; i++){
		
			Node e = new Node(-1, -1);
			hashTable[i] = e;
			
		}
	}
	public int hashFunction(int key)
	{
		return key % size;
	}
	/*
		Thuật toán thêm một phần tư vào bảng băm
		- Tính vị trí phần tử cần thêm theo công thức index = key % M (M là số phần tử của mảng)
		- Nếu H[index] chưa có giá trị thì lưu key vào vị trí đó (H[index] = key)
		- Gán cho H[index].next = EMPTY
		- Nếu vị trí đó đã chứa một key khác thì thực hiện
		+ Tìm vị trí còn trống từ cuối mảng 
		+ Gán key vào vị trí mới tìm được.
		+ Gán giá trị next của ô index bằng vị trí ô mới tìm được
	*/
	public void insert(int key)
	{
		int index = hashFunction(key);
		if(hashTable[index].key == -1)
		{
			hashTable[index].key = key;			
		}
		else{
			int current = index;
			 
			while(hashTable[current].next!=-1)
				current = hashTable[current].next;
			System.out.println("current:" + current);
			
			for(int i=size-1; i>=0; i--)
				if(hashTable[i].key==-1)
				{
					hashTable[i].key = key;
					hashTable[current].next = i;
					return;
				}
		}
		
	}
	/*
		Xoa một phần tử trong bảng băm
		+ Tìm vị trí của phần tử cần xóa và phần tử trước nó trong danh sách
		+ Nếu không tồn tại phần tử => return -1
		+ Nếu có phần tử cần xóa thì phân thành các trường hợp sau:
		1. Phần tử cần xóa ở giữa anh sách: gán thông tin next của phần tử prev = next của phần tử current. Và xóa phần tử current
		2. Phần tử cần xóa ở đầu danh sách:
		2.1. Tìm phần tử tiếp theo nextNode
		2.1. Nếu danh sách chỉ có duy nhất một phần tử thì gán key và next của phần tử current là -1
		2.2. Nếu có phần tử thì gán giá trị key, next của phần tử tiếp thep nextNode vào cho phần tử current. Sau đó xóa phần tử nextNode đi
	*/
	public int delete(int key)
	{
		int index = hashFunction(key);
		int current = index;
		int prev = -1;
		while(current!=-1 && hashTable[current].key!=key){
			prev = current;
			current = hashTable[current].next;
		}
		System.out.println("prev:" + prev + ", current:" + current);
		
		if(current <0) return -1;
		
		//Xóa phần tử đầu tiên
		if(prev ==-1){
			int nextNode = hashTable[current].next;
			if(nextNode!=-1){
			
				hashTable[current].key = hashTable[nextNode].key;
				hashTable[current].next = hashTable[nextNode].next;
				hashTable[nextNode].key = hashTable[nextNode].next=-1;
			}
			else {
				hashTable[current].key=-1;
				hashTable[current].next=-1;
			}
		}
		else{
			//Xóa các phần tử ở giữa
			hashTable[prev].next = hashTable[current].next;
			hashTable[current].key=-1;
			hashTable[current].next=-1;
		}
		
		
		return -1;
	}
	
	public void printData()
	{
		for(int i=0; i<size; i++)
			System.out.println(hashTable[i].key + "->" + hashTable[i].next);
	}
	
/*	
	public HashTable(){
		size = 0;
		data = new int[0];
	}
	public HashTable(int s)
	{
		size = s;
		data = new int[size];	
		for(int i=0; i<size; i++) data[i] = 0;
	}
	public void Display()
	{
		System.out.println("DANH SACH CAC PHAN TU");
		for(int i=0; i<size; i++)
			System.out.print(data[i] + ", ");
		System.out.println();
	}
	public void add(int x)
	{
		int index = x % size;
		if(data[index] ==0) data[index] = x;
		else{
			int i=1;
			for(i=1; i<size;i++){
				index = (x + i*i)%size;
				if(data[index] ==0)
				{
					data[index] = x;
					break;
				}
			}
		}				
	}
*/	
	
	 
}


public class Main {
  public static void main(String[] args) {
    System.out.println("Sort Algorithm Example");	 
	
	HashTable H = new HashTable(10);
	/*H.add(89);
	H.add(18);
	H.add(49);
	H.add(58);
	H.add(69);
	H.add(67);
	H.add(23);
	H.Display();*/
 	
	H.insert(20);
	/*H.insert(30);
	H.insert(40);
	H.insert(50);*/
	H.printData();
	H.delete(20);
	H.printData();
	 
	
  }
}	
